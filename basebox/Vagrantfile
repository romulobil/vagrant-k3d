# -*- mode: ruby -*-
# vi: set ft=ruby :
IMAGE = "bento/debian-11"
CPU_PER_BOX = 2
MEMORY_PER_BOX = 2048

Vagrant.configure("2") do |config|
  config.vm.box = IMAGE
  config.vm.provider :virtualbox do |v|
    v.memory = MEMORY_PER_BOX
    v.cpus = CPU_PER_BOX
  end

  config.vm.provision "shell", inline: <<-SHELL
    # Docker configuration
	sudo apt-get update
	
	apt-get install -y apt-transport-https \
	ca-certificates \
	gnupg \
	curl \
	wget \
	lsb-release
    
	install -m 0755 -d /etc/apt/keyrings
	curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
    chmod a+r /etc/apt/keyrings/docker.gpg
	echo \
	"deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian \
	"$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | \
	tee /etc/apt/sources.list.d/docker.list > /dev/null
	
	apt-get update
	
	apt-get install -y \
	docker-ce \
	docker-ce-cli \
	containerd.io \
	docker-buildx-plugin \
	docker-compose-plugin
	cat <<-EOF | sudo tee /etc/docker/daemon.json
	{
	  "log-opts": {
		"max-size": "100m"
	  }
	}
	EOF

	# Enable and configure required modules
	cat <<-EOF | sudo tee /etc/modules-load.d/containerd.conf
	overlay
	br_netfilter
	EOF
	
	modprobe overlay
	modprobe br_netfilter

	# install cri-dockerd
	wget https://github.com/Mirantis/cri-dockerd/releases/download/v0.3.1/cri-dockerd_0.3.1.3-0.debian-bullseye_amd64.deb
	apt install -y ./cri-dockerd_0.3.1.3-0.debian-bullseye_amd64.deb

	mkdir -p /etc/systemd/system/docker.service.d
	systemctl daemon-reload
	systemctl enable docker
	systemctl restart docker
	systemctl enable containerd
    systemctl restart containerd
	
	# Enable bridged traffic through iptables
	cat <<-EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf
	net.bridge.bridge-nf-call-ip6tables = 1
	net.bridge.bridge-nf-call-iptables = 1
	net.ipv4.ip_forward = 1
	EOF
	
	sysctl --system

	# Configure containerd
	mkdir -p /etc/containerd
	containerd config default | \
	  sed 's/^\([[:space:]]*SystemdCgroup = \).*/\1true/' | \
	  tee /etc/containerd/config.toml

    # k8s configuration
	# Disable swap
	swapoff -a
	sed -i 's/^\(.*vg-swap.*\)/#\1/' /etc/fstab

    curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg |  apt-key add -
    apt-add-repository "deb https://apt.kubernetes.io/ kubernetes-xenial main"

    wget -q -O - https://raw.githubusercontent.com/rancher/k3d/main/install.sh | bash

    # let's pull the k3s container image once in the base image and reuse it - saves traffic and start up time every time a child image is started
    k3d cluster create warmup-cluster --servers 1 --agents 0
    k3d cluster delete warmup-cluster

    apt-get clean
    cat /dev/null > ~/.bash_history && history -c
    dd if=/dev/zero of=/EMPTY bs=1M || echo "dd exit code $? is suppressed"
    rm /EMPTY
    sync
  SHELL
end